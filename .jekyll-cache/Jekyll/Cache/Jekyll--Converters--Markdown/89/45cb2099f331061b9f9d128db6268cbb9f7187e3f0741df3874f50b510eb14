I"o<h2 id="lets-log-in">Let’s log in</h2>
<p>Head to your terminal window to login to your instance:</p>
<ul>
  <li>We will access our instances using a Secure SHell (SSH) connection.</li>
</ul>

<p>What you need:</p>
<ol>
  <li>
    <p><strong>Your instance’s IP address</strong>: get this from the instance overview in your dashboard</p>

    <p>###.###.###.###</p>
  </li>
  <li>
    <p><strong>Your login name</strong>: this depends on the name of the Linux OS image you selected</p>

    <p>Login names:</p>

    <table>
      <tbody>
        <tr>
          <td>Ubuntu</td>
          <td><strong>ubuntu</strong></td>
        </tr>
        <tr>
          <td>Centos</td>
          <td><strong>centos</strong></td>
        </tr>
        <tr>
          <td>Fedora</td>
          <td><strong>fedora</strong></td>
        </tr>
        <tr>
          <td>Scientific Linux</td>
          <td><strong>root</strong></td>
        </tr>
        <tr>
          <td>Debian</td>
          <td><strong>debian</strong></td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>The location and name of your private key pair (if you are using Windows and Putty)
 My_Key_Pair.ppk</p>

    <p>Once saved (or saved and uploaded) your private key file permission will need to be changed to work with your SSH client in the next lessons. Run this command in your terminal:</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  chmod 600 name_of_your_key.pem
</code></pre></div>    </div>
  </li>
</ol>

<blockquote class="callout">
  <h2 id="if-youre-using-linux--mac--unix">If you’re using Linux / Mac / Unix</h2>

  <p>$ ssh login_name@###.###.###.###</p>

  <p>or (if you have more than one private key)</p>

  <p>$ ssh –i ~/.ssh/My_Key_Pair.pem login_name@###.###.###.###</p>
</blockquote>

<blockquote class="callout">
  <h2 id="if-youre-using-windows">If you’re using Windows</h2>

  <p>1) Open Putty</p>

  <p>2) Under “Host name (or IP address)” put: login_name@###.###.###.###</p>

  <p>3) In the menu on the left, expand “SSH” and click on “Auth”.</p>

  <p>4) Under the section “Authentication parameters” click on “Browse…”.</p>

  <p>5) Select your previously create .ppk private key.</p>

  <p>6) Click on “Open” to start the connection to your instance.</p>
</blockquote>

<h2 id="if-it-all-worked">If it all worked…</h2>

<p><img src="../fig/nimbus_logged_in.png" alt="Successful login" /></p>

<h2 id="if-you-get-an-error">If you get an error…</h2>

<p>1) ssh: Could not resolve hostname \342\200\223i name or service unknown error - <a href="http://tumblr.gudge.com/post/18186353550/ssh-could-not-resolve-hostname-342200223i">link</a></p>

<p>When using MobaXTerm if you cut and paste the <em>ssh –i ~/.ssh/My_Key_Pair.pem login_name@###.###.###.###</em> example you will get the wrong hyphen in the “-i” part and throw a confusing error</p>

<p><strong>Solution:</strong> Don’t cut and paste example - manually type in ssh syntax</p>

<hr />

<p>2) Asks for passphrase when no passphrase was created.</p>

<p>When creating a private keypair from Nimbus interface, it copies it to a clipboard, which you then have to save to your computer.  You need to ensure no extra characters are added and —–BEGIN RSA PRIVATE KEY—– and —–END RSA PRIVATE KEY—– present</p>

<p><strong>Solution:</strong> Use nano, vi directly or other non-Windows text editor, should be something like below</p>

<p><img src="../fig/example private key.png" alt="example private key" /></p>

<h2 id="volume-storage">Volume Storage</h2>

<p>We can check that our data volume is attached, but we can’t use it just yet.  If the unformatted volume is properly attached you should see:</p>

<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@test-instance:~# sudo fdisk -l /dev/vdc
Disk /dev/vdc: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
</code></pre></div></div>

<h2 id="format-and-mount-a-filesystem">Format and mount a filesystem</h2>

<p>We need to format and create a filesystem on the volume.  We will do this using the mkfs command.  <strong>Warning: Use mkfs only once for each volume.  It wipes any data already on it.</strong></p>

<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@test-instance:~# sudo mkfs.ext4 /dev/vdc
mke2fs 1.42.13 (17-May-2015)
Creating filesystem with 5242880 4k blocks and 1310720 inodes
Filesystem UUID: 4523e176-043a-4d3f-b4a9-0c74ac9a4562
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000
 
Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done
</code></pre></div></div>

<p>Then we can mount the volume, and create a subdirectory to store files in:</p>

<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test-instance:~$ sudo mkdir /data
test-instance:~$ sudo mount /dev/vdc /data
test-instance:~$ df -h | grep vdc
/dev/vdc         20G   44M   19G   1% /data
test-instance:~$ sudo mkdir /data/my_files
test-instance:~$ sudo chown ubuntu /data/my_files
</code></pre></div></div>

<p>You can now store files and subdirectories in the /data/my_files/ directory.</p>

<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test-instance:~$ nano /data/my_files/my-data-file
# type some made up data into the file, save and quit (^X)
test-instance:~$ ls /data/my_files/
my-data-file
</code></pre></div></div>

<h2 id="unmount-and-reuse-the-volume">Unmount and reuse the volume</h2>

<p>Once you have stored some data in your volume, you may wish to <strong>unmount</strong> it <strong>detach</strong> it from your instance.</p>

<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test-instance:~$ sudo umount /data/my_files
</code></pre></div></div>

<p>Next, select <strong>Manage Attachments</strong> from the drop-down menu of the volume, then <strong>Detach Volume</strong>, and again to confirm.  Warning: If you detach a volume before you unmount it, you may lose data.</p>

<p>Now you could delete your instance and recreate it, then attach this data volume to the new one. For now, we will just reattach it to the same instance.  Click <strong>Manage Attachments</strong> again, select your instance, and <strong>Attach Volume</strong>.</p>

<p>This time, let’s mount the volume somewhere different. Remember, you do <strong>not</strong> need to create a filesystem again, because that would wipe your data.</p>
<div class="output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test-instance:~$ sudo mkdir /data2
test-instance:~$ sudo mount /dev/vdc /data2
test-instance:~$ df -h | grep vdc
/dev/vdc         20G   44M   19G   1% /data2
test-instance:~$ ls /data2/
my_files
test-instance:~$ ls /data2/my_files/
my-data-file
</code></pre></div></div>
:ET